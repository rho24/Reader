@using Reader.Infrastructure
@model dynamic

@{
    ViewBag.Title = "Home";
}

<div class="row-fluid fill">
    <div class="span3 well sidebar">
        <!--Sidebar content-->
        <ul class="nav nav-list">
            <li><a class="btn" data-bind="click: getFeeds">Get Feeds</a></li>
            <li class="nav-header">Feeds</li>
            
            <!-- ko template: { name: feeditemTemplateChooser, foreach: feeds } --><!-- /ko -->
        </ul>
    </div>
    <div class="span9 well body fill">
        <!--Body content-->
        <ul class="nav nav-tabs nav-stacked" data-bind="if: selectedFeed">
            <li class="nav-header" >
                <span>
                    <span data-bind="text: selectedFeed.Name"></span>
                    <a href="#" data-bind="click: selectedFeed.refresh">Refresh</a>
                </span>
            </li>
            <!-- ko foreach: selectedFeed.Posts, beforeRemove: hidePost, afterAdd: showPost -->
            <li><a data-bind="attr: { href: Url }, text: Name"></a></li>
            <!-- /ko -->
        </ul>
    </div>
</div>

@section scripts {
    <script type="text/json" id="feeds-json">@Extensions.ToJson(Model.feeds)</script>

    <script type="text/javascript">

        ko.trackDeep = function(obj, propertyNames) {
            if (obj === undefined)
                return;

            if (obj instanceof Array) {
                obj.forEach(function(item) {
                    ko.trackDeep(item, propertyNames);
                });
            } else if (obj instanceof Object && !(obj instanceof Function)) {
                (propertyNames || Object.getOwnPropertyNames(obj)).forEach(function(propertyName) {
                    ko.trackDeep(obj[propertyName], propertyNames);
                });
                ko.track(obj);
            }
        };

        Array.prototype.pushMany = function(args) {
            this.push.apply(this, args);
        };

        var notifier = $.connection.notificationHub;


        $(function() {

            var feedItem = function(data) {
                var that = this;

                this.isGroup = data.isGroup;
                this.name = data.name;
                this.feedPostsId = data.feedPostsId;
                this.nodes = _.map(data.nodes, function(node) {
                    return new feedItem(node);
                });

                this.selectFeed = function() {
                    $.get('@Url.HttpRouteUrl("DefaultApi", new {controller = "Feeds"})' + '/' + that.feedPostsId.split('/')[1], function(data) {
                        ko.trackDeep(data);
                        data.refresh = function() {
                            $.post('@Url.HttpRouteUrl("UserActions", new {action = "RefreshFeedPosts"})' + '/' + that.feedPostsId.split('/')[1]);
                        };
                        model.selectedFeed = data;
                        model.selectedFeed.refresh();
                    });
                };

                this.isSelected = function() {
                    return model.selectedFeed && model.selectedFeed.Name === that.name;
                };

                return this;
            };

            var model = {
                feeds: _.map($.parseJSON($('#feeds-json').html()), function(node) {
                    return new feedItem(node);
                }),
                selectedFeed: null,
                getFeeds: function() {
                    $.get('@Url.HttpRouteUrl("DefaultApi", new {controller = "UserFeeds"})', function(data) {
                        ko.trackDeep(data);
                        model.feeds = data;
                    });
                },
                feeditemTemplateChooser: function(node) {
                    if (node.isGroup)
                        return 'feedgroupitem-template';
                    else
                        return 'feeditem-template';
                },
                hidePost: function(e) {
                    $(e).slideUp();
                },
                showPost: function(e) {
                    $(e).hide().slideDown();
                }
            };

            notifier.client.FeedPostsUpdated = function(message) {
                if (message.Id != model.selectedFeed.Id.split('/')[1])
                    return;

                $.get('@Url.HttpRouteUrl("DefaultApi", new {controller = "Posts"})' + '/' + model.selectedFeed.Id.split('/')[1], function(data) {
                    ko.trackDeep(data);
                    model.selectedFeed.Posts.removeAll();
                    model.selectedFeed.Posts.pushMany(data);
                });
            };


            window.viewModel = model;

            ko.trackDeep(model);

            // Here's a custom Knockout binding that makes elements shown/hidden via jQuery's fadeIn()/fadeOut() methods
            // Could be stored in a separate utility library
            ko.bindingHandlers.slideSwitch = {
                update: function(element, valueAccessor) {
                    // Whenever the value subsequently changes, slowly fade the element in or out
                    var value = valueAccessor();


                    ko.utils.unwrapObservable(value) ? $(element).fadeIn() : $(element).fadeOut();
                }
            };

            ko.applyBindings(model);
        });

    </script>
    
    <script type="text/html" id="feeditem-template">
        <li data-bind="css: { active: isSelected() }"><a href="#" data-bind="text: name, click: selectFeed"></a></li>
    </script>
    
    <script type="text/html" id="feedgroupitem-template">
        <li>
            <ul class="nav nav-list">
                <li class="nav-header" data-bind="text: name"></li>
                <!-- ko template: { name: $root.feeditemTemplateChooser, foreach: nodes } --><!-- /ko -->
            </ul>
        </li>
        <li class="divider"></li>
    </script>
}